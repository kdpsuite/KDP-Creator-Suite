name: Build Flutter APK

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build_apk:
    name: Build Debug and Release APK
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: mobile-app

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # 🧩 Verify and fix missing files before build
      - name: Verify and fix Flutter project structure
        shell: bash
        run: |
          set -e
          mkdir -p lib/core/themes
          THEME_FILE="lib/core/themes/app_theme.dart"
          WIDGET_FILE="lib/presentation/onboarding_flow/widgets/page_indicator_widget.dart"

          # 🧱 Restore app_theme.dart if missing
          if [ ! -f "$THEME_FILE" ]; then
            echo "🔧 Restoring missing app_theme.dart..."
            cat > "$THEME_FILE" <<'EOF'
import 'package:flutter/material.dart';

class AppTheme {
  AppTheme._();

  static final lightTheme = ThemeData(
    brightness: Brightness.light,
    primaryColor: const Color(0xFF1E88E5),
    scaffoldBackgroundColor: Colors.white,
    colorScheme: const ColorScheme.light(
      primary: Color(0xFF1E88E5),
      secondary: Color(0xFF43A047),
      background: Colors.white,
      surface: Colors.white,
      outline: Color(0xFFBDBDBD),
      onPrimary: Colors.white,
      onSecondary: Colors.white,
      onBackground: Colors.black,
      onSurface: Colors.black,
      onError: Colors.white,
      error: Colors.redAccent,
    ),
    appBarTheme: const AppBarTheme(
      backgroundColor: Color(0xFF1E88E5),
      foregroundColor: Colors.white,
      elevation: 2,
    ),
  );

  static final darkTheme = ThemeData(
    brightness: Brightness.dark,
    primaryColor: const Color(0xFF1E88E5),
    scaffoldBackgroundColor: const Color(0xFF121212),
    colorScheme: const ColorScheme.dark(
      primary: Color(0xFF1E88E5),
      secondary: Color(0xFF43A047),
      background: Color(0xFF121212),
      surface: Color(0xFF1E1E1E),
      outline: Color(0xFF616161),
      onPrimary: Colors.white,
      onSecondary: Colors.white,
      onBackground: Colors.white,
      onSurface: Colors.white,
      onError: Colors.white,
      error: Colors.redAccent,
    ),
  );
}
EOF
          fi

          # 🧹 Repair PageIndicatorWidget.dart if it begins with stray braces
          if grep -q '^}' "$WIDGET_FILE" 2>/dev/null; then
            echo "⚙️ Cleaning malformed PageIndicatorWidget.dart..."
            cat > "$WIDGET_FILE" <<'EOF'
import 'package:flutter/material.dart';
import 'package:kdp_creator_suite/core/themes/app_theme.dart';

class PageIndicatorWidget extends StatelessWidget {
  final int currentIndex;
  final int totalPages;

  const PageIndicatorWidget({
    Key? key,
    required this.currentIndex,
    required this.totalPages,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Row(
      mainAxisAlignment: MainAxisAlignment.center,
      children: List.generate(totalPages, (index) {
        final isActive = index == currentIndex;
        return AnimatedContainer(
          duration: const Duration(milliseconds: 300),
          margin: const EdgeInsets.symmetric(horizontal: 4.0),
          height: 10.0,
          width: isActive ? 12.0 : 8.0,
          decoration: BoxDecoration(
            color: isActive
                ? AppTheme.lightTheme.colorScheme.primary
                : AppTheme.lightTheme.colorScheme.outline,
            borderRadius: BorderRadius.circular(8.0),
          ),
        );
      }),
    );
  }
}
EOF
          fi

          echo "✅ File structure verified successfully."

      # 🧠 Auto-fix missing Dart imports
      - name: Auto-fix missing Dart imports
        shell: bash
        run: |
          echo "🚀 Running Dart analysis to detect issues..."
          flutter pub get

          # Run dart analyzer and save output
          flutter analyze > analysis.txt || true

          if grep -q "Some errors can be fixed automatically" analysis.txt; then
            echo "🛠 Applying automatic fixes..."
            dart fix --apply
            echo "✅ Automatic fixes applied."
          else
            echo "✅ No auto-fixable issues found."
          fi

          flutter format .
          echo "🎨 Dart files formatted."

      # 🔢 Auto-increment version & build number
      - name: Set version and build number
        shell: bash
        run: |
          TAG=$(git describe --tags --abbrev=0 || echo "0.0.1")
          BUILD_NUMBER=${GITHUB_RUN_NUMBER}

          echo "🔖 Using version $TAG and build number $BUILD_NUMBER"

          # Set debug version
          sed -i "s/^version: .*/version: $TAG-debug+$BUILD_NUMBER/" pubspec.yaml
          flutter pub get
          flutter build apk --debug

          # Set release version
          sed -i "s/^version: .*/version: $TAG+$BUILD_NUMBER/" pubspec.yaml
          flutter pub get
          flutter build apk --release

      # 🏗 Setup Flutter environment
      - name: Setup Flutter 3.37.0-0.1.pre
        shell: bash
        run: |
          set -e
          sudo apt-get update -y
          sudo apt-get install -y curl git unzip xz-utils zip libglu1-mesa libgtk-3-dev clang cmake ninja-build pkg-config

          git clone https://github.com/flutter/flutter.git -b beta
          cd flutter
          git checkout 3.37.0-0.1.pre
          cd ..
          export PATH="$PWD/flutter/bin:$PATH"

          flutter --version
          flutter doctor -v
          yes | flutter doctor --android-licenses

      # 📦 Zip APKs
      - name: Zip APKs
        run: |
          mkdir -p build/apk_zip
          zip -j build/apk_zip/kdp_creator_suite_apks.zip \
            build/app/outputs/flutter-apk/app-debug.apk \
            build/app/outputs/flutter-apk/app-release.apk

      # 📤 Upload APK ZIP
      - name: Upload APK ZIP
        uses: actions/upload-artifact@v3
        with:
          name: kdp_creator_suite_apks
          path: build/apk_zip/kdp_creator_suite_apks.zip
