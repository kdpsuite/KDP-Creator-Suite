name: Build Flutter APKs

on:
  workflow_dispatch:        # Manual run trigger
  push:
    branches:
      - main               # Runs on push to main branch

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      FLUTTER_VERSION: "3.37.0-0.1.pre"   # Set your desired Flutter version

    steps:
      # 1. Checkout repo with full history
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2. Git setup for committing fixed files
      - name: Git configuration
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git config --global advice.detachedHead false
        shell: bash

      # 3. Grant write permissions for committing fixes
      - name: Enable write permissions
        uses: actions/setup-permissions@v3
        with:
          permissions: write-all

      # 4. Install Flutter manually
      - name: Install Flutter
        run: |
          git clone -b $FLUTTER_VERSION https://github.com/flutter/flutter.git $HOME/flutter
          export PATH="$HOME/flutter/bin:$PATH"
          export FLUTTER_GIT_URL="https://github.com/flutter/flutter.git"
        shell: bash

      # 5. Flutter preflight check
      - name: Flutter doctor
        working-directory: mobile-app
        run: flutter doctor -v

      # 6. Run project repair scripts
      - name: Fix Flutter project files
        working-directory: mobile-app
        run: |
          chmod +x scripts/*.sh
          ./scripts/fix_files.sh
          ./scripts/fix_app_theme_imports.sh

      # 7. Commit any fixed files
      - name: Commit fixed files
        run: |
          git add .
          git diff-index --quiet HEAD || git commit -m "chore: apply automated AppTheme & permission fixes"

      # 8. Fix Dart file permissions (ensure with scripts)
      - name: Fix Dart file permissions
        run: find mobile-app -type f -name "*.dart" -exec chmod 644 {} \;

      # 9. Dart & Flutter dependency management
      - name: Check outdated dependencies
        working-directory: mobile-app
        run: flutter pub outdated
      - name: Upgrade dependencies
        working-directory: mobile-app
        run: flutter pub upgrade --major-versions
      - name: Get Flutter dependencies
        working-directory: mobile-app
        run: flutter pub get

      # 10. Flutter build APKs
      - name: Build debug APK
        working-directory: mobile-app
        run: flutter build apk --debug
      - name: Build release APK
        working-directory: mobile-app
        run: flutter build apk --release

      # 11. ZIP APKs
      - name: Prepare APKs
        run: |
          mkdir -p build/apks
          cp mobile-app/build/app/outputs/flutter-apk/app-debug.apk build/apks/
          cp mobile-app/build/app/outputs/flutter-apk/app-release.apk build/apks/
          cd build && zip -r apks.zip apks
        shell: bash

      # 12. Upload artifact
      - name: Upload APKs
        uses: actions/upload-artifact@v4
        with:
          name: apks
          path: build/apks.zip

      # 13. Automatic versioning & build numbering (placeholder - implement as needed)
      - name: Automatic versioning
        run: echo "Automatic versioning step (to be implemented)"
        shell: bash

      # 14. Maintain working directory
      - name: Ensure working directory unchanged
        run: echo "Working directory maintained, scripts do not cd globally"
        shell: bash
