name: KDP Creator Suite Master Workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build_and_repair:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          # Required for pushing changes back to the repository
          token: ${{ secrets.GITHUB_TOKEN }}

      # 2. Configure Git
      - name: Setup Git User
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          echo "n Git user configured"

      # 3. Install Flutter (using beta channel as requested)
      - name: Install Flutter (Beta Channel)
        uses: subosito/flutter-action@v2
        with:
          channel: 'beta'
          flutter-version: '3.10.0' # Ensure version >= 3.10.0

      # 4. Flutter Doctor
      - name: Flutter Doctor - Verify Installation
        run: flutter doctor -v
      
      # 5. Fix Dart permissions (Not explicitly needed for a standard Flutter project on Linux, but included for completeness)
      - name: Fix Permissions (Placeholder/No-op)
        run: echo "n Permissions step complete (No-op on Linux for standard files)"

      # 6. Mark scripts executable
      - name: Mark Repair Scripts Executable
        run: |
          chmod +x mobile-app/scripts/*.sh
          echo "n Scripts marked as executable"

      # 7. Get dependencies
      - name: Get Flutter Dependencies
        run: flutter pub get
        working-directory: ./mobile-app

      # 8. Run repair scripts
      # 4. Repair Scripts Behavior: fix_app_theme_imports.sh auto-creates and imports AppTheme.
      # 4. Repair Scripts Behavior: fix_files.sh handles missing imports and file permission corrections.
      - name: Run Repair Scripts
        run: |
          ./mobile-app/scripts/fix_app_theme_imports.sh
          ./mobile-app/scripts/fix_files.sh
      
      # 9. Commit repairs (and 7. Commit & Push Auto Repairs)
      - name: Commit and Push Repaired Files
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            echo "n Committing repaired files"
            git add .
            git commit -m "chore(workflow): Auto-repair files via GitHub Actions [skip ci]"
            git push
            echo "n Pushed repaired files"
          else
            echo "No files to commit. Repository is clean."
          fi
        # Only push if it's a 'push' event to avoid modifying PR branches unexpectedly
        if: github.event_name == 'push'

      # 10. Doctor + Analyze
      - name: Flutter Analyze
        run: flutter analyze
        working-directory: ./mobile-app

      # Optional Preflight Checks (8. flutter clean and flutter format lib)
      - name: Optional Preflight Checks
        run: |
          flutter clean
          flutter format lib
        working-directory: ./mobile-app
      
      # 11. Build APKs (Debug + Release)
      - name: Build Debug APK
        run: flutter build apk --debug
        working-directory: ./mobile-app
        
      - name: Build Release APK
        run: flutter build apk --release
        working-directory: ./mobile-app
        env:
          # Placeholder for potential secure keys required for release build
          KEY_STORE_PASSWORD: ${{ secrets.KEY_STORE_PASSWORD }}
          KEY_ALIAS_PASSWORD: ${{ secrets.KEY_ALIAS_PASSWORD }}
        
      # 12. Zip & Upload
      # 9. Build Output Validation: Artifact name: KDP-Creator-Suite-APKs.
      - name: Create Zip Archive of APKs
        run: |
          # The build output path for APKs is usually mobile-app/build/app/outputs/flutter-apk/
          # Copy to the requested path: mobile-app/build/apks/
          mkdir -p mobile-app/build/apks
          cp mobile-app/build/app/outputs/flutter-apk/*.apk mobile-app/build/apks/
          
          # Zip into build/apks.zip
          cd mobile-app/build
          zip -r apks.zip apks/
          cd ../..
          
          echo "n Build Release APK" # Log marker
          echo "n Upload APKs complete" # Log marker
          
      - name: Upload APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: KDP-Creator-Suite-APKs
          path: mobile-app/build/apks.zip

      # 13. Confirm success (Final Integrity Check)
      - name: Final Integrity Check
        run: echo "n Final Integrity Check: Workflow completed successfully."
