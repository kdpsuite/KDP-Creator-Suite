name: 🧱 Build & Package Flutter APKs

on:
  workflow_dispatch:
  push:
    branches:
      - main

permissions:
  contents: write
  actions: write

env:
  PROJECT_PATH: mobile-app
  FLUTTER_VERSION: 3.13.0
  BUILD_OUTPUT_DIR: build/app/outputs/flutter-apk
  ARTIFACT_NAME: KDP_Creator_APKs.zip

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🛠️ Manually install Flutter ${{ env.FLUTTER_VERSION }}
        run: |
          echo "🔧 Installing Flutter version $FLUTTER_VERSION..."
          git clone https://github.com/flutter/flutter.git /home/runner/flutter
          cd /home/runner/flutter
          git fetch --all --tags
          git checkout $(git tag -l | grep $FLUTTER_VERSION | tail -1)
          export PATH="$PATH:/home/runner/flutter/bin"
          flutter --version
        env:
          FLUTTER_VERSION: ${{ env.FLUTTER_VERSION }}

      - name: ⚙️ Prepare project and install dependencies
        run: |
          export PATH="$PATH:/home/runner/flutter/bin"
          cd $PROJECT_PATH
          flutter --disable-telemetry
          echo "📦 Getting Flutter dependencies..."
          flutter pub get

      - name: 🧰 Run project fix scripts
        run: |
          echo "🧰 Running fix_files.sh..."
          chmod +x $PROJECT_PATH/scripts/fix_files.sh
          $PROJECT_PATH/scripts/fix_files.sh

      - name: 🔢 Auto-increment build number & version
        run: |
          cd $PROJECT_PATH
          export PATH="$PATH:/home/runner/flutter/bin"
          VERSION_FILE="pubspec.yaml"
          CURRENT_VERSION=$(grep 'version:' $VERSION_FILE | awk '{print $2}')
          BASE_VERSION=$(echo $CURRENT_VERSION | cut -d'+' -f1)
          BUILD_NUMBER=$(echo $CURRENT_VERSION | cut -d'+' -f2)
          if [ -z "$BUILD_NUMBER" ]; then BUILD_NUMBER=0; fi
          NEW_BUILD_NUMBER=$((BUILD_NUMBER+1))
          NEW_VERSION="$BASE_VERSION+$NEW_BUILD_NUMBER"
          sed -i "s/version: .*/version: $NEW_VERSION/" $VERSION_FILE
          echo "✅ Updated version to $NEW_VERSION"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add $VERSION_FILE
          git commit -m "🔢 Auto-bump build number to $NEW_BUILD_NUMBER"
          git push

      - name: 🏗️ Build Debug and Release APKs
        run: |
          export PATH="$PATH:/home/runner/flutter/bin"
          cd $PROJECT_PATH
          echo "🏗️ Building debug APK..."
          flutter build apk --debug
          echo "🏗️ Building release APK..."
          flutter build apk --release

      - name: 📦 Zip APKs
        run: |
          cd $PROJECT_PATH/$BUILD_OUTPUT_DIR
          echo "📦 Zipping APKs..."
          zip -r ${{ github.workspace }}/${{ env.ARTIFACT_NAME }} *.apk
          echo "✅ Created ${{ env.ARTIFACT_NAME }}"

      - name: 🚀 Upload artifact (zipped APKs)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ github.workspace }}/${{ env.ARTIFACT_NAME }}

      - name: 💾 Commit artifacts & changelog back to repo
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          cp ${{ github.workspace }}/${{ env.ARTIFACT_NAME }} .
          echo "🕓 Build completed on $(date)" > build_log.txt
          git add ${{ env.ARTIFACT_NAME }} build_log.txt
          git commit -m "📦 Automated build: $(date)"
          git push
